// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/22/2020 18:02:54"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          BoothDecoder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module BoothDecoder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] MultiplierIn;
// wires                                               
wire NotS;
wire S;
wire Select_2M;
wire Select_M;

// assign statements (if any)                          
BoothDecoder i1 (
// port map - connection between master ports and signals/registers   
	.MultiplierIn(MultiplierIn),
	.NotS(NotS),
	.S(S),
	.Select_2M(Select_2M),
	.Select_M(Select_M)
);
initial 
begin 
#1000000 $finish;
end 
// MultiplierIn[ 2 ]
initial
begin
	repeat(2)
	begin
		MultiplierIn[2] = 1'b0;
		MultiplierIn[2] = #240000 1'b1;
		# 240000;
	end
	MultiplierIn[2] = 1'b0;
end 
// MultiplierIn[ 1 ]
initial
begin
	repeat(4)
	begin
		MultiplierIn[1] = 1'b0;
		MultiplierIn[1] = #120000 1'b1;
		# 120000;
	end
	MultiplierIn[1] = 1'b0;
end 
// MultiplierIn[ 0 ]
initial
begin
	repeat(8)
	begin
		MultiplierIn[0] = 1'b0;
		MultiplierIn[0] = #60000 1'b1;
		# 60000;
	end
	MultiplierIn[0] = 1'b0;
end 
endmodule

