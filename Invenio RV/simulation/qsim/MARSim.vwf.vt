// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/23/2020 22:20:21"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          MAR
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MAR_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] ALU_MAR;
reg [2:0] Control_MAR;
reg [31:0] PC_MAR;
reg [31:0] Registers_MAR;
reg Reloj;
reg Reset;
// wires                                               
wire [31:0] MemoryAddress;

// assign statements (if any)                          
MAR i1 (
// port map - connection between master ports and signals/registers   
	.ALU_MAR(ALU_MAR),
	.Control_MAR(Control_MAR),
	.MemoryAddress(MemoryAddress),
	.PC_MAR(PC_MAR),
	.Registers_MAR(Registers_MAR),
	.Reloj(Reloj),
	.Reset(Reset)
);
initial 
begin 
#1000000 $finish;
end 

// Reloj
always
begin
	Reloj = 1'b0;
	Reloj = #10000 1'b1;
	#10000;
end 

// Reset
initial
begin
	Reset = 1'b1;
	Reset = #40000 1'b0;
end 
// Control_MAR[ 2 ]
initial
begin
	Control_MAR[2] = 1'b0;
	Control_MAR[2] = #80000 1'b1;
	Control_MAR[2] = #40000 1'b0;
end 
// Control_MAR[ 1 ]
initial
begin
	Control_MAR[1] = 1'b0;
	Control_MAR[1] = #120000 1'b1;
	Control_MAR[1] = #40000 1'b0;
end 
// Control_MAR[ 0 ]
initial
begin
	Control_MAR[0] = 1'b0;
	Control_MAR[0] = #160000 1'b1;
	Control_MAR[0] = #40000 1'b0;
end 
// ALU_MAR[ 31 ]
initial
begin
	ALU_MAR[31] = 1'b0;
end 
// ALU_MAR[ 30 ]
initial
begin
	ALU_MAR[30] = 1'b0;
end 
// ALU_MAR[ 29 ]
initial
begin
	ALU_MAR[29] = 1'b0;
end 
// ALU_MAR[ 28 ]
initial
begin
	ALU_MAR[28] = 1'b0;
end 
// ALU_MAR[ 27 ]
initial
begin
	ALU_MAR[27] = 1'b0;
end 
// ALU_MAR[ 26 ]
initial
begin
	ALU_MAR[26] = 1'b0;
end 
// ALU_MAR[ 25 ]
initial
begin
	ALU_MAR[25] = 1'b0;
end 
// ALU_MAR[ 24 ]
initial
begin
	ALU_MAR[24] = 1'b0;
end 
// ALU_MAR[ 23 ]
initial
begin
	ALU_MAR[23] = 1'b0;
end 
// ALU_MAR[ 22 ]
initial
begin
	ALU_MAR[22] = 1'b0;
end 
// ALU_MAR[ 21 ]
initial
begin
	ALU_MAR[21] = 1'b0;
end 
// ALU_MAR[ 20 ]
initial
begin
	ALU_MAR[20] = 1'b0;
end 
// ALU_MAR[ 19 ]
initial
begin
	ALU_MAR[19] = 1'b0;
	ALU_MAR[19] = #80000 1'b1;
	ALU_MAR[19] = #120000 1'b0;
end 
// ALU_MAR[ 18 ]
initial
begin
	ALU_MAR[18] = 1'b0;
	ALU_MAR[18] = #80000 1'b1;
	ALU_MAR[18] = #120000 1'b0;
end 
// ALU_MAR[ 17 ]
initial
begin
	ALU_MAR[17] = 1'b0;
	ALU_MAR[17] = #80000 1'b1;
	ALU_MAR[17] = #120000 1'b0;
end 
// ALU_MAR[ 16 ]
initial
begin
	ALU_MAR[16] = 1'b0;
	ALU_MAR[16] = #80000 1'b1;
	ALU_MAR[16] = #120000 1'b0;
end 
// ALU_MAR[ 15 ]
initial
begin
	ALU_MAR[15] = 1'b0;
end 
// ALU_MAR[ 14 ]
initial
begin
	ALU_MAR[14] = 1'b0;
end 
// ALU_MAR[ 13 ]
initial
begin
	ALU_MAR[13] = 1'b0;
end 
// ALU_MAR[ 12 ]
initial
begin
	ALU_MAR[12] = 1'b0;
end 
// ALU_MAR[ 11 ]
initial
begin
	ALU_MAR[11] = 1'b0;
end 
// ALU_MAR[ 10 ]
initial
begin
	ALU_MAR[10] = 1'b0;
end 
// ALU_MAR[ 9 ]
initial
begin
	ALU_MAR[9] = 1'b0;
	ALU_MAR[9] = #80000 1'b1;
	ALU_MAR[9] = #120000 1'b0;
end 
// ALU_MAR[ 8 ]
initial
begin
	ALU_MAR[8] = 1'b0;
end 
// ALU_MAR[ 7 ]
initial
begin
	ALU_MAR[7] = 1'b0;
end 
// ALU_MAR[ 6 ]
initial
begin
	ALU_MAR[6] = 1'b0;
end 
// ALU_MAR[ 5 ]
initial
begin
	ALU_MAR[5] = 1'b0;
end 
// ALU_MAR[ 4 ]
initial
begin
	ALU_MAR[4] = 1'b0;
end 
// ALU_MAR[ 3 ]
initial
begin
	ALU_MAR[3] = 1'b0;
	ALU_MAR[3] = #80000 1'b1;
	ALU_MAR[3] = #120000 1'b0;
end 
// ALU_MAR[ 2 ]
initial
begin
	ALU_MAR[2] = 1'b0;
end 
// ALU_MAR[ 1 ]
initial
begin
	ALU_MAR[1] = 1'b0;
	ALU_MAR[1] = #80000 1'b1;
	ALU_MAR[1] = #120000 1'b0;
end 
// ALU_MAR[ 0 ]
initial
begin
	ALU_MAR[0] = 1'b0;
end 
// PC_MAR[ 31 ]
initial
begin
	PC_MAR[31] = 1'b0;
end 
// PC_MAR[ 30 ]
initial
begin
	PC_MAR[30] = 1'b0;
end 
// PC_MAR[ 29 ]
initial
begin
	PC_MAR[29] = 1'b0;
end 
// PC_MAR[ 28 ]
initial
begin
	PC_MAR[28] = 1'b0;
end 
// PC_MAR[ 27 ]
initial
begin
	PC_MAR[27] = 1'b0;
end 
// PC_MAR[ 26 ]
initial
begin
	PC_MAR[26] = 1'b0;
end 
// PC_MAR[ 25 ]
initial
begin
	PC_MAR[25] = 1'b0;
end 
// PC_MAR[ 24 ]
initial
begin
	PC_MAR[24] = 1'b0;
end 
// PC_MAR[ 23 ]
initial
begin
	PC_MAR[23] = 1'b0;
end 
// PC_MAR[ 22 ]
initial
begin
	PC_MAR[22] = 1'b0;
end 
// PC_MAR[ 21 ]
initial
begin
	PC_MAR[21] = 1'b0;
end 
// PC_MAR[ 20 ]
initial
begin
	PC_MAR[20] = 1'b0;
end 
// PC_MAR[ 19 ]
initial
begin
	PC_MAR[19] = 1'b0;
end 
// PC_MAR[ 18 ]
initial
begin
	PC_MAR[18] = 1'b0;
end 
// PC_MAR[ 17 ]
initial
begin
	PC_MAR[17] = 1'b0;
end 
// PC_MAR[ 16 ]
initial
begin
	PC_MAR[16] = 1'b0;
end 
// PC_MAR[ 15 ]
initial
begin
	PC_MAR[15] = 1'b0;
end 
// PC_MAR[ 14 ]
initial
begin
	PC_MAR[14] = 1'b0;
end 
// PC_MAR[ 13 ]
initial
begin
	PC_MAR[13] = 1'b0;
	PC_MAR[13] = #80000 1'b1;
	PC_MAR[13] = #120000 1'b0;
end 
// PC_MAR[ 12 ]
initial
begin
	PC_MAR[12] = 1'b0;
	PC_MAR[12] = #80000 1'b1;
	PC_MAR[12] = #120000 1'b0;
end 
// PC_MAR[ 11 ]
initial
begin
	PC_MAR[11] = 1'b0;
end 
// PC_MAR[ 10 ]
initial
begin
	PC_MAR[10] = 1'b0;
end 
// PC_MAR[ 9 ]
initial
begin
	PC_MAR[9] = 1'b0;
end 
// PC_MAR[ 8 ]
initial
begin
	PC_MAR[8] = 1'b0;
end 
// PC_MAR[ 7 ]
initial
begin
	PC_MAR[7] = 1'b0;
	PC_MAR[7] = #80000 1'b1;
	PC_MAR[7] = #120000 1'b0;
end 
// PC_MAR[ 6 ]
initial
begin
	PC_MAR[6] = 1'b0;
end 
// PC_MAR[ 5 ]
initial
begin
	PC_MAR[5] = 1'b0;
	PC_MAR[5] = #80000 1'b1;
	PC_MAR[5] = #120000 1'b0;
end 
// PC_MAR[ 4 ]
initial
begin
	PC_MAR[4] = 1'b0;
	PC_MAR[4] = #80000 1'b1;
	PC_MAR[4] = #120000 1'b0;
end 
// PC_MAR[ 3 ]
initial
begin
	PC_MAR[3] = 1'b0;
	PC_MAR[3] = #80000 1'b1;
	PC_MAR[3] = #120000 1'b0;
end 
// PC_MAR[ 2 ]
initial
begin
	PC_MAR[2] = 1'b0;
end 
// PC_MAR[ 1 ]
initial
begin
	PC_MAR[1] = 1'b0;
	PC_MAR[1] = #80000 1'b1;
	PC_MAR[1] = #120000 1'b0;
end 
// PC_MAR[ 0 ]
initial
begin
	PC_MAR[0] = 1'b0;
	PC_MAR[0] = #80000 1'b1;
	PC_MAR[0] = #120000 1'b0;
end 
// Registers_MAR[ 31 ]
initial
begin
	Registers_MAR[31] = 1'b0;
end 
// Registers_MAR[ 30 ]
initial
begin
	Registers_MAR[30] = 1'b0;
end 
// Registers_MAR[ 29 ]
initial
begin
	Registers_MAR[29] = 1'b0;
end 
// Registers_MAR[ 28 ]
initial
begin
	Registers_MAR[28] = 1'b0;
end 
// Registers_MAR[ 27 ]
initial
begin
	Registers_MAR[27] = 1'b0;
end 
// Registers_MAR[ 26 ]
initial
begin
	Registers_MAR[26] = 1'b0;
end 
// Registers_MAR[ 25 ]
initial
begin
	Registers_MAR[25] = 1'b0;
end 
// Registers_MAR[ 24 ]
initial
begin
	Registers_MAR[24] = 1'b0;
end 
// Registers_MAR[ 23 ]
initial
begin
	Registers_MAR[23] = 1'b0;
end 
// Registers_MAR[ 22 ]
initial
begin
	Registers_MAR[22] = 1'b0;
end 
// Registers_MAR[ 21 ]
initial
begin
	Registers_MAR[21] = 1'b0;
end 
// Registers_MAR[ 20 ]
initial
begin
	Registers_MAR[20] = 1'b0;
end 
// Registers_MAR[ 19 ]
initial
begin
	Registers_MAR[19] = 1'b0;
end 
// Registers_MAR[ 18 ]
initial
begin
	Registers_MAR[18] = 1'b0;
end 
// Registers_MAR[ 17 ]
initial
begin
	Registers_MAR[17] = 1'b0;
end 
// Registers_MAR[ 16 ]
initial
begin
	Registers_MAR[16] = 1'b0;
end 
// Registers_MAR[ 15 ]
initial
begin
	Registers_MAR[15] = 1'b0;
end 
// Registers_MAR[ 14 ]
initial
begin
	Registers_MAR[14] = 1'b0;
end 
// Registers_MAR[ 13 ]
initial
begin
	Registers_MAR[13] = 1'b0;
end 
// Registers_MAR[ 12 ]
initial
begin
	Registers_MAR[12] = 1'b0;
	Registers_MAR[12] = #80000 1'b1;
	Registers_MAR[12] = #120000 1'b0;
end 
// Registers_MAR[ 11 ]
initial
begin
	Registers_MAR[11] = 1'b0;
end 
// Registers_MAR[ 10 ]
initial
begin
	Registers_MAR[10] = 1'b0;
end 
// Registers_MAR[ 9 ]
initial
begin
	Registers_MAR[9] = 1'b0;
end 
// Registers_MAR[ 8 ]
initial
begin
	Registers_MAR[8] = 1'b0;
end 
// Registers_MAR[ 7 ]
initial
begin
	Registers_MAR[7] = 1'b0;
	Registers_MAR[7] = #80000 1'b1;
	Registers_MAR[7] = #120000 1'b0;
end 
// Registers_MAR[ 6 ]
initial
begin
	Registers_MAR[6] = 1'b0;
	Registers_MAR[6] = #80000 1'b1;
	Registers_MAR[6] = #120000 1'b0;
end 
// Registers_MAR[ 5 ]
initial
begin
	Registers_MAR[5] = 1'b0;
	Registers_MAR[5] = #80000 1'b1;
	Registers_MAR[5] = #120000 1'b0;
end 
// Registers_MAR[ 4 ]
initial
begin
	Registers_MAR[4] = 1'b0;
end 
// Registers_MAR[ 3 ]
initial
begin
	Registers_MAR[3] = 1'b0;
	Registers_MAR[3] = #80000 1'b1;
	Registers_MAR[3] = #120000 1'b0;
end 
// Registers_MAR[ 2 ]
initial
begin
	Registers_MAR[2] = 1'b0;
end 
// Registers_MAR[ 1 ]
initial
begin
	Registers_MAR[1] = 1'b0;
	Registers_MAR[1] = #80000 1'b1;
	Registers_MAR[1] = #120000 1'b0;
end 
// Registers_MAR[ 0 ]
initial
begin
	Registers_MAR[0] = 1'b0;
end 
endmodule

