// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/24/2020 12:53:12"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Counter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Counter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] Control_Counter;
reg [5:0] IR_Counter;
reg [31:0] Registers_Counter;
reg Reloj;
reg Reset;
// wires                                               
wire [31:0] Conteo;
wire Counter_Control;

// assign statements (if any)                          
Counter i1 (
// port map - connection between master ports and signals/registers   
	.Conteo(Conteo),
	.Control_Counter(Control_Counter),
	.Counter_Control(Counter_Control),
	.IR_Counter(IR_Counter),
	.Registers_Counter(Registers_Counter),
	.Reloj(Reloj),
	.Reset(Reset)
);
initial 
begin 
#1000000 $finish;
end 

// Reloj
always
begin
	Reloj = 1'b0;
	Reloj = #10000 1'b1;
	#10000;
end 

// Reset
initial
begin
	Reset = 1'b1;
	Reset = #80000 1'b0;
end 
// Control_Counter[ 2 ]
initial
begin
	Control_Counter[2] = 1'b0;
	Control_Counter[2] = #510000 1'b1;
	Control_Counter[2] = #30000 1'b0;
end 
// Control_Counter[ 1 ]
initial
begin
	Control_Counter[1] = 1'b0;
	Control_Counter[1] = #80000 1'b1;
	Control_Counter[1] = #30000 1'b0;
end 
// Control_Counter[ 0 ]
initial
begin
	Control_Counter[0] = 1'b0;
	Control_Counter[0] = #110000 1'b1;
	Control_Counter[0] = #400000 1'b0;
	Control_Counter[0] = #30000 1'b1;
end 
// Registers_Counter[ 31 ]
initial
begin
	Registers_Counter[31] = 1'b0;
end 
// Registers_Counter[ 30 ]
initial
begin
	Registers_Counter[30] = 1'b0;
end 
// Registers_Counter[ 29 ]
initial
begin
	Registers_Counter[29] = 1'b0;
end 
// Registers_Counter[ 28 ]
initial
begin
	Registers_Counter[28] = 1'b0;
end 
// Registers_Counter[ 27 ]
initial
begin
	Registers_Counter[27] = 1'b0;
end 
// Registers_Counter[ 26 ]
initial
begin
	Registers_Counter[26] = 1'b0;
end 
// Registers_Counter[ 25 ]
initial
begin
	Registers_Counter[25] = 1'b0;
end 
// Registers_Counter[ 24 ]
initial
begin
	Registers_Counter[24] = 1'b0;
end 
// Registers_Counter[ 23 ]
initial
begin
	Registers_Counter[23] = 1'b0;
end 
// Registers_Counter[ 22 ]
initial
begin
	Registers_Counter[22] = 1'b0;
end 
// Registers_Counter[ 21 ]
initial
begin
	Registers_Counter[21] = 1'b0;
end 
// Registers_Counter[ 20 ]
initial
begin
	Registers_Counter[20] = 1'b0;
end 
// Registers_Counter[ 19 ]
initial
begin
	Registers_Counter[19] = 1'b0;
end 
// Registers_Counter[ 18 ]
initial
begin
	Registers_Counter[18] = 1'b0;
end 
// Registers_Counter[ 17 ]
initial
begin
	Registers_Counter[17] = 1'b0;
end 
// Registers_Counter[ 16 ]
initial
begin
	Registers_Counter[16] = 1'b0;
end 
// Registers_Counter[ 15 ]
initial
begin
	Registers_Counter[15] = 1'b0;
end 
// Registers_Counter[ 14 ]
initial
begin
	Registers_Counter[14] = 1'b0;
end 
// Registers_Counter[ 13 ]
initial
begin
	Registers_Counter[13] = 1'b0;
end 
// Registers_Counter[ 12 ]
initial
begin
	Registers_Counter[12] = 1'b0;
end 
// Registers_Counter[ 11 ]
initial
begin
	Registers_Counter[11] = 1'b0;
end 
// Registers_Counter[ 10 ]
initial
begin
	Registers_Counter[10] = 1'b0;
end 
// Registers_Counter[ 9 ]
initial
begin
	Registers_Counter[9] = 1'b0;
end 
// Registers_Counter[ 8 ]
initial
begin
	Registers_Counter[8] = 1'b0;
end 
// Registers_Counter[ 7 ]
initial
begin
	Registers_Counter[7] = 1'b0;
end 
// Registers_Counter[ 6 ]
initial
begin
	Registers_Counter[6] = 1'b0;
end 
// Registers_Counter[ 5 ]
initial
begin
	Registers_Counter[5] = 1'b0;
end 
// Registers_Counter[ 4 ]
initial
begin
	Registers_Counter[4] = 1'b0;
end 
// Registers_Counter[ 3 ]
initial
begin
	Registers_Counter[3] = 1'b1;
end 
// Registers_Counter[ 2 ]
initial
begin
	Registers_Counter[2] = 1'b0;
end 
// Registers_Counter[ 1 ]
initial
begin
	Registers_Counter[1] = 1'b1;
end 
// Registers_Counter[ 0 ]
initial
begin
	Registers_Counter[0] = 1'b0;
end 
// IR_Counter[ 5 ]
initial
begin
	IR_Counter[5] = 1'b0;
end 
// IR_Counter[ 4 ]
initial
begin
	IR_Counter[4] = 1'b0;
end 
// IR_Counter[ 3 ]
initial
begin
	IR_Counter[3] = 1'b0;
end 
// IR_Counter[ 2 ]
initial
begin
	IR_Counter[2] = 1'b1;
end 
// IR_Counter[ 1 ]
initial
begin
	IR_Counter[1] = 1'b0;
end 
// IR_Counter[ 0 ]
initial
begin
	IR_Counter[0] = 1'b0;
end 
endmodule

