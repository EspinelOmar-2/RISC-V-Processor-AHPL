// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/12/2020 18:49:14"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ALU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ALU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [36:0] Control_ALU;
reg [31:0] CSR_ALU;
reg [29:0] IR_ALU;
reg [31:0] PC_ALU;
reg [63:0] Registers_ALU;
reg Reloj;
reg Reset;
// wires                                               
wire [31:0] AdderResulto;
wire [31:0] AddrMode32o;
wire [31:0] AddrMode34o;
wire [3:0] ALU_Control;
wire [31:0] ALU_CSR;
wire [31:0] ALU_MAR;
wire [31:0] ALU_PC;
wire [31:0] ALU_Registers;
wire [31:0] ASRRegistero;
wire [31:0] LSRegistero;
wire [31:0] LSRRegistero;
wire [31:0] MulResulto;

// assign statements (if any)                          
ALU i1 (
// port map - connection between master ports and signals/registers   
	.AdderResulto(AdderResulto),
	.AddrMode32o(AddrMode32o),
	.AddrMode34o(AddrMode34o),
	.ALU_Control(ALU_Control),
	.ALU_CSR(ALU_CSR),
	.ALU_MAR(ALU_MAR),
	.ALU_PC(ALU_PC),
	.ALU_Registers(ALU_Registers),
	.ASRRegistero(ASRRegistero),
	.Control_ALU(Control_ALU),
	.CSR_ALU(CSR_ALU),
	.IR_ALU(IR_ALU),
	.LSRegistero(LSRegistero),
	.LSRRegistero(LSRRegistero),
	.MulResulto(MulResulto),
	.PC_ALU(PC_ALU),
	.Registers_ALU(Registers_ALU),
	.Reloj(Reloj),
	.Reset(Reset)
);
initial 
begin 
#1000000 $finish;
end 

// Reloj
always
begin
	Reloj = 1'b0;
	Reloj = #10000 1'b1;
	#10000;
end 

// Reset
initial
begin
	Reset = 1'b0;
	Reset = #30000 1'b1;
end 
// Registers_ALU[ 63 ]
initial
begin
	Registers_ALU[63] = 1'b0;
end 
// Registers_ALU[ 62 ]
initial
begin
	Registers_ALU[62] = 1'b0;
end 
// Registers_ALU[ 61 ]
initial
begin
	Registers_ALU[61] = 1'b0;
end 
// Registers_ALU[ 60 ]
initial
begin
	Registers_ALU[60] = 1'b0;
end 
// Registers_ALU[ 59 ]
initial
begin
	Registers_ALU[59] = 1'b0;
end 
// Registers_ALU[ 58 ]
initial
begin
	Registers_ALU[58] = 1'b0;
end 
// Registers_ALU[ 57 ]
initial
begin
	Registers_ALU[57] = 1'b0;
end 
// Registers_ALU[ 56 ]
initial
begin
	Registers_ALU[56] = 1'b0;
end 
// Registers_ALU[ 55 ]
initial
begin
	Registers_ALU[55] = 1'b0;
end 
// Registers_ALU[ 54 ]
initial
begin
	Registers_ALU[54] = 1'b0;
end 
// Registers_ALU[ 53 ]
initial
begin
	Registers_ALU[53] = 1'b0;
end 
// Registers_ALU[ 52 ]
initial
begin
	Registers_ALU[52] = 1'b0;
end 
// Registers_ALU[ 51 ]
initial
begin
	Registers_ALU[51] = 1'b0;
end 
// Registers_ALU[ 50 ]
initial
begin
	Registers_ALU[50] = 1'b0;
end 
// Registers_ALU[ 49 ]
initial
begin
	Registers_ALU[49] = 1'b0;
end 
// Registers_ALU[ 48 ]
initial
begin
	Registers_ALU[48] = 1'b0;
end 
// Registers_ALU[ 47 ]
initial
begin
	Registers_ALU[47] = 1'b0;
end 
// Registers_ALU[ 46 ]
initial
begin
	Registers_ALU[46] = 1'b0;
end 
// Registers_ALU[ 45 ]
initial
begin
	Registers_ALU[45] = 1'b0;
end 
// Registers_ALU[ 44 ]
initial
begin
	Registers_ALU[44] = 1'b0;
end 
// Registers_ALU[ 43 ]
initial
begin
	Registers_ALU[43] = 1'b0;
end 
// Registers_ALU[ 42 ]
initial
begin
	Registers_ALU[42] = 1'b0;
end 
// Registers_ALU[ 41 ]
initial
begin
	Registers_ALU[41] = 1'b0;
end 
// Registers_ALU[ 40 ]
initial
begin
	Registers_ALU[40] = 1'b0;
end 
// Registers_ALU[ 39 ]
initial
begin
	Registers_ALU[39] = 1'b0;
end 
// Registers_ALU[ 38 ]
initial
begin
	Registers_ALU[38] = 1'b0;
end 
// Registers_ALU[ 37 ]
initial
begin
	Registers_ALU[37] = 1'b0;
end 
// Registers_ALU[ 36 ]
initial
begin
	Registers_ALU[36] = 1'b0;
	Registers_ALU[36] = #390000 1'b1;
	Registers_ALU[36] = #140000 1'b0;
end 
// Registers_ALU[ 35 ]
initial
begin
	Registers_ALU[35] = 1'b0;
	Registers_ALU[35] = #390000 1'b1;
	Registers_ALU[35] = #140000 1'b0;
end 
// Registers_ALU[ 34 ]
initial
begin
	Registers_ALU[34] = 1'b0;
	Registers_ALU[34] = #390000 1'b1;
	Registers_ALU[34] = #140000 1'b0;
end 
// Registers_ALU[ 33 ]
initial
begin
	Registers_ALU[33] = 1'b0;
	Registers_ALU[33] = #390000 1'b1;
	Registers_ALU[33] = #140000 1'b0;
end 
// Registers_ALU[ 32 ]
initial
begin
	Registers_ALU[32] = 1'b0;
	Registers_ALU[32] = #390000 1'b1;
	Registers_ALU[32] = #140000 1'b0;
end 
// Registers_ALU[ 31 ]
initial
begin
	Registers_ALU[31] = 1'b1;
	Registers_ALU[31] = #390000 1'b0;
	Registers_ALU[31] = #140000 1'b1;
end 
// Registers_ALU[ 30 ]
initial
begin
	Registers_ALU[30] = 1'b1;
	Registers_ALU[30] = #390000 1'b0;
	Registers_ALU[30] = #140000 1'b1;
end 
// Registers_ALU[ 29 ]
initial
begin
	Registers_ALU[29] = 1'b0;
end 
// Registers_ALU[ 28 ]
initial
begin
	Registers_ALU[28] = 1'b0;
end 
// Registers_ALU[ 27 ]
initial
begin
	Registers_ALU[27] = 1'b1;
	Registers_ALU[27] = #390000 1'b0;
	Registers_ALU[27] = #140000 1'b1;
end 
// Registers_ALU[ 26 ]
initial
begin
	Registers_ALU[26] = 1'b1;
	Registers_ALU[26] = #390000 1'b0;
	Registers_ALU[26] = #140000 1'b1;
end 
// Registers_ALU[ 25 ]
initial
begin
	Registers_ALU[25] = 1'b1;
	Registers_ALU[25] = #390000 1'b0;
	Registers_ALU[25] = #140000 1'b1;
end 
// Registers_ALU[ 24 ]
initial
begin
	Registers_ALU[24] = 1'b1;
	Registers_ALU[24] = #390000 1'b0;
	Registers_ALU[24] = #140000 1'b1;
end 
// Registers_ALU[ 23 ]
initial
begin
	Registers_ALU[23] = 1'b0;
end 
// Registers_ALU[ 22 ]
initial
begin
	Registers_ALU[22] = 1'b0;
end 
// Registers_ALU[ 21 ]
initial
begin
	Registers_ALU[21] = 1'b0;
end 
// Registers_ALU[ 20 ]
initial
begin
	Registers_ALU[20] = 1'b0;
end 
// Registers_ALU[ 19 ]
initial
begin
	Registers_ALU[19] = 1'b1;
	Registers_ALU[19] = #390000 1'b0;
	Registers_ALU[19] = #140000 1'b1;
end 
// Registers_ALU[ 18 ]
initial
begin
	Registers_ALU[18] = 1'b1;
	Registers_ALU[18] = #390000 1'b0;
	Registers_ALU[18] = #140000 1'b1;
end 
// Registers_ALU[ 17 ]
initial
begin
	Registers_ALU[17] = 1'b1;
	Registers_ALU[17] = #390000 1'b0;
	Registers_ALU[17] = #140000 1'b1;
end 
// Registers_ALU[ 16 ]
initial
begin
	Registers_ALU[16] = 1'b1;
	Registers_ALU[16] = #390000 1'b0;
	Registers_ALU[16] = #140000 1'b1;
end 
// Registers_ALU[ 15 ]
initial
begin
	Registers_ALU[15] = 1'b0;
end 
// Registers_ALU[ 14 ]
initial
begin
	Registers_ALU[14] = 1'b0;
end 
// Registers_ALU[ 13 ]
initial
begin
	Registers_ALU[13] = 1'b0;
end 
// Registers_ALU[ 12 ]
initial
begin
	Registers_ALU[12] = 1'b0;
end 
// Registers_ALU[ 11 ]
initial
begin
	Registers_ALU[11] = 1'b1;
	Registers_ALU[11] = #390000 1'b0;
	Registers_ALU[11] = #140000 1'b1;
end 
// Registers_ALU[ 10 ]
initial
begin
	Registers_ALU[10] = 1'b1;
	Registers_ALU[10] = #390000 1'b0;
	Registers_ALU[10] = #140000 1'b1;
end 
// Registers_ALU[ 9 ]
initial
begin
	Registers_ALU[9] = 1'b1;
end 
// Registers_ALU[ 8 ]
initial
begin
	Registers_ALU[8] = 1'b1;
	Registers_ALU[8] = #390000 1'b0;
	Registers_ALU[8] = #140000 1'b1;
end 
// Registers_ALU[ 7 ]
initial
begin
	Registers_ALU[7] = 1'b0;
	Registers_ALU[7] = #390000 1'b1;
	Registers_ALU[7] = #140000 1'b0;
end 
// Registers_ALU[ 6 ]
initial
begin
	Registers_ALU[6] = 1'b0;
end 
// Registers_ALU[ 5 ]
initial
begin
	Registers_ALU[5] = 1'b0;
	Registers_ALU[5] = #390000 1'b1;
	Registers_ALU[5] = #140000 1'b0;
end 
// Registers_ALU[ 4 ]
initial
begin
	Registers_ALU[4] = 1'b0;
end 
// Registers_ALU[ 3 ]
initial
begin
	Registers_ALU[3] = 1'b1;
end 
// Registers_ALU[ 2 ]
initial
begin
	Registers_ALU[2] = 1'b1;
end 
// Registers_ALU[ 1 ]
initial
begin
	Registers_ALU[1] = 1'b1;
end 
// Registers_ALU[ 0 ]
initial
begin
	Registers_ALU[0] = 1'b1;
end 
// IR_ALU[ 29 ]
initial
begin
	IR_ALU[29] = 1'b0;
	IR_ALU[29] = #350000 1'b1;
	IR_ALU[29] = #40000 1'b0;
end 
// IR_ALU[ 28 ]
initial
begin
	IR_ALU[28] = 1'b0;
	IR_ALU[28] = #350000 1'b1;
	IR_ALU[28] = #40000 1'b0;
end 
// IR_ALU[ 27 ]
initial
begin
	IR_ALU[27] = 1'b0;
	IR_ALU[27] = #350000 1'b1;
	IR_ALU[27] = #40000 1'b0;
end 
// IR_ALU[ 26 ]
initial
begin
	IR_ALU[26] = 1'b0;
	IR_ALU[26] = #350000 1'b1;
	IR_ALU[26] = #40000 1'b0;
end 
// IR_ALU[ 25 ]
initial
begin
	IR_ALU[25] = 1'b0;
end 
// IR_ALU[ 24 ]
initial
begin
	IR_ALU[24] = 1'b0;
end 
// IR_ALU[ 23 ]
initial
begin
	IR_ALU[23] = 1'b0;
end 
// IR_ALU[ 22 ]
initial
begin
	IR_ALU[22] = 1'b0;
end 
// IR_ALU[ 21 ]
initial
begin
	IR_ALU[21] = 1'b0;
end 
// IR_ALU[ 20 ]
initial
begin
	IR_ALU[20] = 1'b0;
end 
// IR_ALU[ 19 ]
initial
begin
	IR_ALU[19] = 1'b0;
end 
// IR_ALU[ 18 ]
initial
begin
	IR_ALU[18] = 1'b0;
end 
// IR_ALU[ 17 ]
initial
begin
	IR_ALU[17] = 1'b0;
end 
// IR_ALU[ 16 ]
initial
begin
	IR_ALU[16] = 1'b0;
end 
// IR_ALU[ 15 ]
initial
begin
	IR_ALU[15] = 1'b0;
end 
// IR_ALU[ 14 ]
initial
begin
	IR_ALU[14] = 1'b0;
end 
// IR_ALU[ 13 ]
initial
begin
	IR_ALU[13] = 1'b0;
end 
// IR_ALU[ 12 ]
initial
begin
	IR_ALU[12] = 1'b0;
end 
// IR_ALU[ 11 ]
initial
begin
	IR_ALU[11] = 1'b0;
end 
// IR_ALU[ 10 ]
initial
begin
	IR_ALU[10] = 1'b0;
end 
// IR_ALU[ 9 ]
initial
begin
	IR_ALU[9] = 1'b0;
end 
// IR_ALU[ 8 ]
initial
begin
	IR_ALU[8] = 1'b0;
end 
// IR_ALU[ 7 ]
initial
begin
	IR_ALU[7] = 1'b0;
end 
// IR_ALU[ 6 ]
initial
begin
	IR_ALU[6] = 1'b0;
end 
// IR_ALU[ 5 ]
initial
begin
	IR_ALU[5] = 1'b0;
end 
// IR_ALU[ 4 ]
initial
begin
	IR_ALU[4] = 1'b0;
	IR_ALU[4] = #310000 1'b1;
	IR_ALU[4] = #40000 1'b0;
end 
// IR_ALU[ 3 ]
initial
begin
	IR_ALU[3] = 1'b0;
	IR_ALU[3] = #310000 1'b1;
	IR_ALU[3] = #40000 1'b0;
end 
// IR_ALU[ 2 ]
initial
begin
	IR_ALU[2] = 1'b0;
end 
// IR_ALU[ 1 ]
initial
begin
	IR_ALU[1] = 1'b0;
	IR_ALU[1] = #310000 1'b1;
	IR_ALU[1] = #40000 1'b0;
end 
// IR_ALU[ 0 ]
initial
begin
	IR_ALU[0] = 1'b0;
	IR_ALU[0] = #310000 1'b1;
	IR_ALU[0] = #40000 1'b0;
end 
// Control_ALU[ 36 ]
initial
begin
	Control_ALU[36] = 1'b0;
	Control_ALU[36] = #30000 1'b1;
	Control_ALU[36] = #20000 1'b0;
	Control_ALU[36] = #80000 1'b1;
	Control_ALU[36] = #20000 1'b0;
	Control_ALU[36] = #80000 1'b1;
	Control_ALU[36] = #20000 1'b0;
end 
// Control_ALU[ 35 ]
initial
begin
	Control_ALU[35] = 1'b0;
	Control_ALU[35] = #370000 1'b1;
	Control_ALU[35] = #20000 1'b0;
end 
// Control_ALU[ 34 ]
initial
begin
	Control_ALU[34] = 1'b0;
	Control_ALU[34] = #350000 1'b1;
	Control_ALU[34] = #20000 1'b0;
end 
// Control_ALU[ 33 ]
initial
begin
	Control_ALU[33] = 1'b0;
	Control_ALU[33] = #330000 1'b1;
	Control_ALU[33] = #20000 1'b0;
end 
// Control_ALU[ 32 ]
initial
begin
	Control_ALU[32] = 1'b0;
	Control_ALU[32] = #310000 1'b1;
	Control_ALU[32] = #20000 1'b0;
end 
// Control_ALU[ 31 ]
initial
begin
	Control_ALU[31] = 1'b0;
	Control_ALU[31] = #390000 1'b1;
	Control_ALU[31] = #140000 1'b0;
end 
// Control_ALU[ 30 ]
initial
begin
	Control_ALU[30] = 1'b0;
end 
// Control_ALU[ 29 ]
initial
begin
	Control_ALU[29] = 1'b0;
end 
// Control_ALU[ 28 ]
initial
begin
	Control_ALU[28] = 1'b0;
end 
// Control_ALU[ 27 ]
initial
begin
	Control_ALU[27] = 1'b0;
end 
// Control_ALU[ 26 ]
initial
begin
	Control_ALU[26] = 1'b0;
end 
// Control_ALU[ 25 ]
initial
begin
	Control_ALU[25] = 1'b0;
end 
// Control_ALU[ 24 ]
initial
begin
	Control_ALU[24] = 1'b0;
end 
// Control_ALU[ 23 ]
initial
begin
	Control_ALU[23] = 1'b0;
	Control_ALU[23] = #110000 1'b1;
	Control_ALU[23] = #20000 1'b0;
	Control_ALU[23] = #80000 1'b1;
	Control_ALU[23] = #20000 1'b0;
end 
// Control_ALU[ 22 ]
initial
begin
	Control_ALU[22] = 1'b0;
end 
// Control_ALU[ 21 ]
initial
begin
	Control_ALU[21] = 1'b0;
end 
// Control_ALU[ 20 ]
initial
begin
	Control_ALU[20] = 1'b0;
	Control_ALU[20] = #250000 1'b1;
	Control_ALU[20] = #60000 1'b0;
end 
// Control_ALU[ 19 ]
initial
begin
	Control_ALU[19] = 1'b0;
	Control_ALU[19] = #150000 1'b1;
	Control_ALU[19] = #60000 1'b0;
end 
// Control_ALU[ 18 ]
initial
begin
	Control_ALU[18] = 1'b0;
	Control_ALU[18] = #50000 1'b1;
	Control_ALU[18] = #60000 1'b0;
end 
// Control_ALU[ 17 ]
initial
begin
	Control_ALU[17] = 1'b0;
end 
// Control_ALU[ 16 ]
initial
begin
	Control_ALU[16] = 1'b0;
end 
// Control_ALU[ 15 ]
initial
begin
	Control_ALU[15] = 1'b0;
end 
// Control_ALU[ 14 ]
initial
begin
	Control_ALU[14] = 1'b0;
end 
// Control_ALU[ 13 ]
initial
begin
	Control_ALU[13] = 1'b0;
end 
// Control_ALU[ 12 ]
initial
begin
	Control_ALU[12] = 1'b0;
end 
// Control_ALU[ 11 ]
initial
begin
	Control_ALU[11] = 1'b0;
end 
// Control_ALU[ 10 ]
initial
begin
	Control_ALU[10] = 1'b0;
end 
// Control_ALU[ 9 ]
initial
begin
	Control_ALU[9] = 1'b0;
end 
// Control_ALU[ 8 ]
initial
begin
	Control_ALU[8] = 1'b0;
end 
// Control_ALU[ 7 ]
initial
begin
	Control_ALU[7] = 1'b0;
end 
// Control_ALU[ 6 ]
initial
begin
	Control_ALU[6] = 1'b0;
end 
// Control_ALU[ 5 ]
initial
begin
	Control_ALU[5] = 1'b0;
end 
// Control_ALU[ 4 ]
initial
begin
	Control_ALU[4] = 1'b0;
end 
// Control_ALU[ 3 ]
initial
begin
	Control_ALU[3] = 1'b0;
end 
// Control_ALU[ 2 ]
initial
begin
	Control_ALU[2] = 1'b0;
end 
// Control_ALU[ 1 ]
initial
begin
	Control_ALU[1] = 1'b0;
end 
// Control_ALU[ 0 ]
initial
begin
	Control_ALU[0] = 1'b0;
end 
// CSR_ALU[ 31 ]
initial
begin
	CSR_ALU[31] = 1'b0;
end 
// CSR_ALU[ 30 ]
initial
begin
	CSR_ALU[30] = 1'b0;
end 
// CSR_ALU[ 29 ]
initial
begin
	CSR_ALU[29] = 1'b0;
end 
// CSR_ALU[ 28 ]
initial
begin
	CSR_ALU[28] = 1'b0;
end 
// CSR_ALU[ 27 ]
initial
begin
	CSR_ALU[27] = 1'b0;
end 
// CSR_ALU[ 26 ]
initial
begin
	CSR_ALU[26] = 1'b0;
end 
// CSR_ALU[ 25 ]
initial
begin
	CSR_ALU[25] = 1'b0;
end 
// CSR_ALU[ 24 ]
initial
begin
	CSR_ALU[24] = 1'b0;
end 
// CSR_ALU[ 23 ]
initial
begin
	CSR_ALU[23] = 1'b0;
end 
// CSR_ALU[ 22 ]
initial
begin
	CSR_ALU[22] = 1'b0;
end 
// CSR_ALU[ 21 ]
initial
begin
	CSR_ALU[21] = 1'b0;
end 
// CSR_ALU[ 20 ]
initial
begin
	CSR_ALU[20] = 1'b0;
end 
// CSR_ALU[ 19 ]
initial
begin
	CSR_ALU[19] = 1'b0;
end 
// CSR_ALU[ 18 ]
initial
begin
	CSR_ALU[18] = 1'b0;
end 
// CSR_ALU[ 17 ]
initial
begin
	CSR_ALU[17] = 1'b0;
end 
// CSR_ALU[ 16 ]
initial
begin
	CSR_ALU[16] = 1'b0;
end 
// CSR_ALU[ 15 ]
initial
begin
	CSR_ALU[15] = 1'b0;
end 
// CSR_ALU[ 14 ]
initial
begin
	CSR_ALU[14] = 1'b0;
end 
// CSR_ALU[ 13 ]
initial
begin
	CSR_ALU[13] = 1'b0;
end 
// CSR_ALU[ 12 ]
initial
begin
	CSR_ALU[12] = 1'b0;
end 
// CSR_ALU[ 11 ]
initial
begin
	CSR_ALU[11] = 1'b0;
end 
// CSR_ALU[ 10 ]
initial
begin
	CSR_ALU[10] = 1'b0;
end 
// CSR_ALU[ 9 ]
initial
begin
	CSR_ALU[9] = 1'b0;
end 
// CSR_ALU[ 8 ]
initial
begin
	CSR_ALU[8] = 1'b0;
end 
// CSR_ALU[ 7 ]
initial
begin
	CSR_ALU[7] = 1'b0;
end 
// CSR_ALU[ 6 ]
initial
begin
	CSR_ALU[6] = 1'b0;
end 
// CSR_ALU[ 5 ]
initial
begin
	CSR_ALU[5] = 1'b0;
end 
// CSR_ALU[ 4 ]
initial
begin
	CSR_ALU[4] = 1'b0;
end 
// CSR_ALU[ 3 ]
initial
begin
	CSR_ALU[3] = 1'b0;
end 
// CSR_ALU[ 2 ]
initial
begin
	CSR_ALU[2] = 1'b0;
end 
// CSR_ALU[ 1 ]
initial
begin
	CSR_ALU[1] = 1'b0;
end 
// CSR_ALU[ 0 ]
initial
begin
	CSR_ALU[0] = 1'b0;
end 
// PC_ALU[ 31 ]
initial
begin
	PC_ALU[31] = 1'b0;
end 
// PC_ALU[ 30 ]
initial
begin
	PC_ALU[30] = 1'b0;
end 
// PC_ALU[ 29 ]
initial
begin
	PC_ALU[29] = 1'b0;
end 
// PC_ALU[ 28 ]
initial
begin
	PC_ALU[28] = 1'b0;
end 
// PC_ALU[ 27 ]
initial
begin
	PC_ALU[27] = 1'b0;
end 
// PC_ALU[ 26 ]
initial
begin
	PC_ALU[26] = 1'b0;
end 
// PC_ALU[ 25 ]
initial
begin
	PC_ALU[25] = 1'b0;
end 
// PC_ALU[ 24 ]
initial
begin
	PC_ALU[24] = 1'b0;
end 
// PC_ALU[ 23 ]
initial
begin
	PC_ALU[23] = 1'b0;
end 
// PC_ALU[ 22 ]
initial
begin
	PC_ALU[22] = 1'b0;
end 
// PC_ALU[ 21 ]
initial
begin
	PC_ALU[21] = 1'b0;
end 
// PC_ALU[ 20 ]
initial
begin
	PC_ALU[20] = 1'b0;
end 
// PC_ALU[ 19 ]
initial
begin
	PC_ALU[19] = 1'b0;
end 
// PC_ALU[ 18 ]
initial
begin
	PC_ALU[18] = 1'b0;
end 
// PC_ALU[ 17 ]
initial
begin
	PC_ALU[17] = 1'b0;
end 
// PC_ALU[ 16 ]
initial
begin
	PC_ALU[16] = 1'b0;
end 
// PC_ALU[ 15 ]
initial
begin
	PC_ALU[15] = 1'b0;
end 
// PC_ALU[ 14 ]
initial
begin
	PC_ALU[14] = 1'b0;
end 
// PC_ALU[ 13 ]
initial
begin
	PC_ALU[13] = 1'b0;
end 
// PC_ALU[ 12 ]
initial
begin
	PC_ALU[12] = 1'b0;
end 
// PC_ALU[ 11 ]
initial
begin
	PC_ALU[11] = 1'b0;
end 
// PC_ALU[ 10 ]
initial
begin
	PC_ALU[10] = 1'b0;
end 
// PC_ALU[ 9 ]
initial
begin
	PC_ALU[9] = 1'b0;
end 
// PC_ALU[ 8 ]
initial
begin
	PC_ALU[8] = 1'b0;
end 
// PC_ALU[ 7 ]
initial
begin
	PC_ALU[7] = 1'b0;
end 
// PC_ALU[ 6 ]
initial
begin
	PC_ALU[6] = 1'b0;
end 
// PC_ALU[ 5 ]
initial
begin
	PC_ALU[5] = 1'b0;
end 
// PC_ALU[ 4 ]
initial
begin
	PC_ALU[4] = 1'b0;
end 
// PC_ALU[ 3 ]
initial
begin
	PC_ALU[3] = 1'b0;
end 
// PC_ALU[ 2 ]
initial
begin
	PC_ALU[2] = 1'b0;
end 
// PC_ALU[ 1 ]
initial
begin
	PC_ALU[1] = 1'b0;
end 
// PC_ALU[ 0 ]
initial
begin
	PC_ALU[0] = 1'b0;
end 
endmodule

