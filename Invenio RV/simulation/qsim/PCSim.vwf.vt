// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/24/2020 23:19:48"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          PC
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PC_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] ALU_PC;
reg [1:0] Control_PC;
reg Reloj;
reg Reset;
// wires                                               
wire [31:0] PC_MAR;

// assign statements (if any)                          
PC i1 (
// port map - connection between master ports and signals/registers   
	.ALU_PC(ALU_PC),
	.Control_PC(Control_PC),
	.PC_MAR(PC_MAR),
	.Reloj(Reloj),
	.Reset(Reset)
);
initial 
begin 
#1000000 $finish;
end 

// Reset
initial
begin
	Reset = 1'b0;
	Reset = #30000 1'b1;
end 

// Reloj
always
begin
	Reloj = 1'b0;
	Reloj = #10000 1'b1;
	#10000;
end 
// ALU_PC[ 31 ]
initial
begin
	ALU_PC[31] = 1'b0;
end 
// ALU_PC[ 30 ]
initial
begin
	ALU_PC[30] = 1'b0;
end 
// ALU_PC[ 29 ]
initial
begin
	ALU_PC[29] = 1'b0;
end 
// ALU_PC[ 28 ]
initial
begin
	ALU_PC[28] = 1'b0;
end 
// ALU_PC[ 27 ]
initial
begin
	ALU_PC[27] = 1'b0;
end 
// ALU_PC[ 26 ]
initial
begin
	ALU_PC[26] = 1'b0;
end 
// ALU_PC[ 25 ]
initial
begin
	ALU_PC[25] = 1'b0;
end 
// ALU_PC[ 24 ]
initial
begin
	ALU_PC[24] = 1'b0;
end 
// ALU_PC[ 23 ]
initial
begin
	ALU_PC[23] = 1'b0;
end 
// ALU_PC[ 22 ]
initial
begin
	ALU_PC[22] = 1'b0;
end 
// ALU_PC[ 21 ]
initial
begin
	ALU_PC[21] = 1'b0;
end 
// ALU_PC[ 20 ]
initial
begin
	ALU_PC[20] = 1'b0;
end 
// ALU_PC[ 19 ]
initial
begin
	ALU_PC[19] = 1'b0;
end 
// ALU_PC[ 18 ]
initial
begin
	ALU_PC[18] = 1'b0;
end 
// ALU_PC[ 17 ]
initial
begin
	ALU_PC[17] = 1'b0;
end 
// ALU_PC[ 16 ]
initial
begin
	ALU_PC[16] = 1'b0;
end 
// ALU_PC[ 15 ]
initial
begin
	ALU_PC[15] = 1'b0;
end 
// ALU_PC[ 14 ]
initial
begin
	ALU_PC[14] = 1'b0;
end 
// ALU_PC[ 13 ]
initial
begin
	ALU_PC[13] = 1'b0;
end 
// ALU_PC[ 12 ]
initial
begin
	ALU_PC[12] = 1'b0;
end 
// ALU_PC[ 11 ]
initial
begin
	ALU_PC[11] = 1'b1;
end 
// ALU_PC[ 10 ]
initial
begin
	ALU_PC[10] = 1'b1;
end 
// ALU_PC[ 9 ]
initial
begin
	ALU_PC[9] = 1'b1;
end 
// ALU_PC[ 8 ]
initial
begin
	ALU_PC[8] = 1'b1;
end 
// ALU_PC[ 7 ]
initial
begin
	ALU_PC[7] = 1'b1;
end 
// ALU_PC[ 6 ]
initial
begin
	ALU_PC[6] = 1'b1;
end 
// ALU_PC[ 5 ]
initial
begin
	ALU_PC[5] = 1'b1;
end 
// ALU_PC[ 4 ]
initial
begin
	ALU_PC[4] = 1'b1;
end 
// ALU_PC[ 3 ]
initial
begin
	ALU_PC[3] = 1'b0;
end 
// ALU_PC[ 2 ]
initial
begin
	ALU_PC[2] = 1'b0;
end 
// ALU_PC[ 1 ]
initial
begin
	ALU_PC[1] = 1'b0;
end 
// ALU_PC[ 0 ]
initial
begin
	ALU_PC[0] = 1'b0;
end 
// Control_PC[ 1 ]
initial
begin
	Control_PC[1] = 1'b0;
	Control_PC[1] = #610000 1'b1;
	Control_PC[1] = #70000 1'b0;
end 
// Control_PC[ 0 ]
initial
begin
	Control_PC[0] = 1'b1;
	Control_PC[0] = #420000 1'b0;
	Control_PC[0] = #380000 1'b1;
	Control_PC[0] = #170000 1'b0;
end 
endmodule

